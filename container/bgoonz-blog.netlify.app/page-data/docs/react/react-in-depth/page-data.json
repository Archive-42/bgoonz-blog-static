{"componentChunkName":"component---src-templates-docs-js","path":"/docs/react/react-in-depth/","result":{"data":{"sitePage":{"id":"SitePage /docs/react/react-in-depth/"}},"pageContext":{"url":"/docs/react/react-in-depth/","relativePath":"docs/react/react-in-depth.md","relativeDir":"docs/react","base":"react-in-depth.md","name":"react-in-depth","frontmatter":{"title":"React In Depth","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"Intro To React","description":"React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time.","robots":[],"extra":[{"name":"og:description","value":"React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time.","keyName":"property","relativeUrl":false},{"name":"og:title","value":"Intro To React","keyName":"property","relativeUrl":false},{"name":"og:image","value":"images/kind-whale.gif","keyName":"property","relativeUrl":true},{"name":"twitter:title","value":"Intro To React","keyName":"name","relativeUrl":false},{"name":"twitter:description","value":"React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time.","keyName":"name","relativeUrl":false},{"name":"twitter:card","value":"react_img_intro","keyName":"name","relativeUrl":false},{"name":"og:type","value":"website","keyName":"property","relativeUrl":false}],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>React In Depth</h1>\n<iframe src=\"https://codesandbox.io/embed/react-gists-4s3ll?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"react-gists\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<h1>Random Things to Remember</h1>\n<p><img src=\"https://miro.medium.com/max/60/0*LHVHf7SPZ1t0UVAj?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/0*LHVHf7SPZ1t0UVAj\"></p>\n<p><img src=\"https://miro.medium.com/max/60/0*wR-lbD4zf45-IHoQ?q=20\"><img src=\"https://miro.medium.com/max/630/0*wR-lbD4zf45-IHoQ\"><img src=\"https://miro.medium.com/max/60/0*7EZESKf0XPbncXAY?q=20\"><img src=\"https://miro.medium.com/max/630/0*7EZESKf0XPbncXAY\"></p>\n<ul>\n<li>Using () implictly returns components.</li>\n<li>Role of index.js is to <em>render</em> your application.</li>\n<li>The reference to root comes from a div in the body of your public HTML file.</li>\n<li>State of a component is simply a regular JS Object.</li>\n<li>Class Components require render() method to return JSX.</li>\n<li>Functional Components directly return JSX.</li>\n<li>Class is className in React.</li>\n<li>When parsing for an integer just chain Number.parseInt(\"123\")</li>\n<li>Use ternary operator if you want to make a conditional inside a fragment.</li>\n</ul>\n<!---->\n<ul>\n<li>Purpose of React.Fragment is to allow you to create groups of children without adding an extra dom element.</li>\n</ul>\n<h1>Front-End History</h1>\n<ul>\n<li>React makes it easier for you to make front-end elements. A front-end timeline</li>\n<li>Some noteworthy front end libraries that have been used in the past few years:</li>\n<li>2005: Script.aculo.us</li>\n<li>2005: Dojo</li>\n<li>2006: YUI</li>\n<li>2010: Knockout</li>\n<li>2011: AngularJS</li>\n<li>2012: Elm</li>\n<li>2013: React (Considered the standard front-end library)</li>\n<li>React manages the creation and updating of DOM nodes in your Web page.</li>\n<li>All it does is dynamically render stuff into your DOM.</li>\n<li>What it doesn’t do:</li>\n<li>Ajax</li>\n<li>Services</li>\n<li>Local Storage</li>\n<li>Provide a CSS framework</li>\n<li>React is unopinionated</li>\n<li>Just contains a few rules for developers to follow, and it just works.</li>\n<li>JSX : Javascript Extension is a language invented to help write React Applications (looks like a mixture of JS and HTML)</li>\n<li>Here is an overview of the difference between rendering out vanilla JS to create elements, and JSX:</li>\n</ul>\n<!---->\n<ul>\n<li>This may seem like a lot of code but when you end up building many components, it becomes nice to put each of those functions/classes into their own files to organize your code. Using tools with React</li>\n<li>React DevTools : New tool in your browser to see ow React is working in the browser</li>\n<li>create-react-app : Extensible command-line tool to help generate standard React applications.</li>\n<li>Webpack : In between tool for dealing with the extra build step involved.</li>\n</ul>\n<!---->\n<ul>\n<li>HMR : (Hot Module Replacement) When you make changes to your source code the changes are delivered in real-time.</li>\n<li>React Developers created something called Flux Architecture to moderate how their web page consumes and modifies data received from back-end API's.</li>\n</ul>\n<!---->\n<ul>\n<li>Choosing React</li>\n<li>Basically, React is super important to learn and master.</li>\n</ul>\n<h1>React Concepts and Features</h1>\n<p>There are many benefits to using React over just Vanilla JavaScript.</p>\n<ul>\n<li>Modularity</li>\n<li>To avoid the mess of many event listeners and template strings, React gives you the benefit of a lot of modularity.</li>\n<li>Easy to start</li>\n<li>No specials tools are needed to use Basic React.</li>\n<li>You can start working directly with createElement method in React.</li>\n<li>Declarative Programming</li>\n<li>React is declarative in nature, utilizing either it’s built-in createElement method or the higher-level language known as JSX.</li>\n<li>Reusability</li>\n<li>Create elements that can be re-used over and over. One-flow of data</li>\n<li>React apps are built as a combination of parent and child components.</li>\n<li>Parents can have one or more child components, all children have parents.</li>\n<li>Data is never passed from child to the parent.</li>\n<li>Virtual DOM : React provides a Virtual DOM that acts as an agent between the real DOM and the developer to help debug, maintain, and provide general use.</li>\n<li>Due to this usage, React handles web pages much more intelligently; making it one of the speediest Front End Libraries available.</li>\n</ul>\n<h1>ES6 Refresher</h1>\n<p>Exporting one item per file</p>\n<ul>\n<li>Use export default statement in ES6 to export an item. ES6</li>\n</ul>\n<p>CommonJS (Equivalent)</p>\n<p>Exporting multiple items per file</p>\n<ul>\n<li>Use just thw export keyword (without default) to export multiple items per file. ES6 (Better to export them individually like this, rather than bunching them all into an object)</li>\n</ul>\n<p>CommonJS (Equivalent)</p>\n<p>Importing with ES6 vs CommonJS</p>\n<ul>\n<li>Import statements in ES6 modules must always be at the top of the file, because all imports must occur before the rest of the file’s code runs. ES6</li>\n</ul>\n<p>CommonJS</p>\n<p>Unnamed default imports</p>\n<ul>\n<li>You can name unnamed items exported with export default any name when you import them.</li>\n</ul>\n<!---->\n<ul>\n<li>Just remember if you use export instead of export default then your import is already named and cannot be renamed.</li>\n</ul>\n<p>Aliasing imports</p>\n<ul>\n<li>Use as asterisk to import an entire module’s contents.</li>\n<li>Keep in mind you must use an as keyword to refer to it later.</li>\n</ul>\n<!---->\n<ul>\n<li>You can also name identically named functions or items from different files.</li>\n</ul>\n<p>Browser support for ES6 Modules</p>\n<ul>\n<li>ES6 Modules can only be used when a JS file is specified as a module. &#x3C;script type=\"module\" src=\"./wallet.js\">&#x3C;/script></li>\n<li>You can get browser support for ES6 modules by adding module into your script tag.</li>\n</ul>\n<h1>Notes</h1>\n<h1>JSX In Depth</h1>\n<ul>\n<li>Remember that JSX is just syntactic sugar for the built in React.createElement(component, props, ...children)</li>\n<li>React Library must always be in scope from your JSX code.</li>\n<li>Use Dot Notation for JSX Type</li>\n<li>User-Defined Components Must Be Capitalized &#x3C;Foo /> vs &#x3C;div></li>\n<li>Cannot use a general expression as the React element type. (Incorrect)</li>\n</ul>\n<p>(Corrected)</p>\n<p>Props in JSX</p>\n<ul>\n<li>Several ways to specify props in JSX.</li>\n<li>Javascript Expressions as Props</li>\n</ul>\n<!---->\n<ul>\n<li>String Literals</li>\n</ul>\n<!---->\n<ul>\n<li>Props Default to “True”</li>\n</ul>\n<!---->\n<ul>\n<li>Spread Attributes</li>\n</ul>\n<p>Children in JSX</p>\n<ul>\n<li>props.children : The content between opening and closing tag. JavaScript Expressions as Children</li>\n</ul>\n<p>Functions as Children</p>\n<ul>\n<li>props.children works like any other prop, meaning it can pass any sort of data.</li>\n</ul>\n<p>Booleans, Null, and Undefined Are Ignored</p>\n<ul>\n<li>false, null, undefined, and true are all valid children.</li>\n<li>They will not render.</li>\n<li>You can use these to conditionally render items.</li>\n</ul>\n<!---->\n<ul>\n<li>In this example, the component will only render if showHeader evals to True.</li>\n</ul>\n<!---->\n<ul>\n<li>Note that certain falsy values such as zero will still be rendered by React, you can work around this by ensuring situations like the above eval. into a boolean.</li>\n<li>In the times you want booleans to be rendered out, simply convert it into a string first.</li>\n</ul>\n<h1>Reconciliation</h1>\n<p>The Diffing Algorithm</p>\n<ul>\n<li>Diffing : When the state of a component changes React creates a new virtual DOM tree.</li>\n<li>Elements of Different Types</li>\n<li>Every time the root elements have different types, React tears down the old tree and builds the new tree from scratch.</li>\n<li>DOM Elements Of the Same Type</li>\n<li>When comparing two DOM elements of the same type, React keeps the same underlying DOM node and only updates the changes attributes.</li>\n</ul>\n<!---->\n<ul>\n<li>Component Elements Of The Same Type</li>\n<li>When components update, instances will remain the same, so that state maintains across renders.</li>\n<li>React will only update the props, to match the new element.</li>\n<li>Recursing On Children</li>\n<li>React will iterate both lists of children and generate a mutation whenever there’s a difference.</li>\n<li>This is why we use keys.</li>\n<li>Makes it easier for React to match children in the original tree with children in the subsequent tree.</li>\n<li>Tradeoffs</li>\n<li>Important to remember that reconciliation algorithm is an <em>implementation detail</em>.</li>\n<li>Re-rendering only to apply the differences following the rules stated in the previous sections.</li>\n</ul>\n<h1>Typechecking With PropTypes<img src=\"https://miro.medium.com/max/60/0*8ls0PmtREELbf5Wm?q=20\"><img src=\"https://miro.medium.com/max/630/0*8ls0PmtREELbf5Wm\">\n\n\n</h1>\n<ul>\n<li>As your application grows, you can use React’s typechecking to catch bugs.</li>\n<li>propTypes is a special property to run typechecking.</li>\n<li>exports range of built in validators to ensure your received data is valid.</li>\n<li>propTypes is only checked in development mode.</li>\n</ul>\n<p>Requiring Single Child</p>\n<ul>\n<li>Use PropTypes.element to specify only a single child can be passed to a component as children.</li>\n</ul>\n<p>Default Prop Values</p>\n<ul>\n<li>Use defaultProps to assign default values for props.</li>\n</ul>\n<h1>Notes</h1>\n<h1>React Router Introduction</h1>\n<ul>\n<li>React Router is the answer for rendering different components for different pages.</li>\n<li>A front-end library that allows you to control which components to display using the browser location.</li>\n<li>Client-side Routing Getting started with routing</li>\n<li>Install React Router with:</li>\n<li>npm install — save react-router-dom@⁵.1.2</li>\n<li>Import Browser Router from package.</li>\n<li>import { BrowserRouter } from “react-router-dom”;</li>\n<li>BrowserRouter is the primary component of the router that wraps your route hierarchy.</li>\n<li>Wrap it around components.</li>\n<li>Creates a React Context that passes routing information down to all its descendant components.</li>\n<li>You can also use HashRouter, where it would generate a hash before the endpoint. Creating frontend routes</li>\n<li>React Router helps your app render specific components based on the URL.</li>\n<li>The most common component is &#x3C;Route></li>\n<li>Wrapped around another component, causing the comp. to only render if the a certain URL is matched.</li>\n<li>Props : path, component, exact, and [render]</li>\n<li>Browser Router can only have a single child component.</li>\n<li>The Browser Router wraps all routes within a parent div element.</li>\n</ul>\n<!---->\n<ul>\n<li>component</li>\n<li>Indicates component to render.</li>\n<li>path</li>\n<li>Indicates path to render a specific component.</li>\n<li>exact</li>\n<li>Tells route to not pattern match and only render a certain route exclusively to it’s associated component.</li>\n<li>render</li>\n<li>Optional prop that takes in a function to be called.</li>\n<li>Causes extra work for React.</li>\n<li>Preferred for inline rendering of simple functional components.</li>\n<li>Difference between component and render is that component returns new JSX that be re-mounted, but render returns the JSX that will be mounted only once.</li>\n<li>// This inline rendering will work, but is unnecessarily slow. &#x3C;Route path=”/hello” component={() => &#x3C;h1>Hello!&#x3C;/h1>} /> // This is the preferred way for inline rendering. &#x3C;Route path=”/hello” render={() => &#x3C;h1>Hello!&#x3C;/h1>} /></li>\n<li>Also useful if you need to pass in specific props to a component.</li>\n<li>// `users` to be passed as a prop: const users = { 1: { name: “Andrew” }, 2: { name: “Raymond” }, }; &#x3C;Route path=”/users” render={() => &#x3C;Users users={users} />} />;</li>\n</ul>\n<p>Route path params</p>\n<ul>\n<li>Your component’s props can hold information about URL’s parameters.</li>\n<li>Will match segments starting at : to the next /, ?, #.</li>\n</ul>\n<!---->\n<ul>\n<li>{...props} spreads out the router's props.</li>\n<li>props.match.params is used to access the match prop's parameters.</li>\n<li>Useful keys on the match object:</li>\n<li>isExact : boolean that tells you whether or not the URL exactly matches the path.</li>\n<li>url : the currentURL</li>\n<li>path : Route path it matched against (w/o wildcards)</li>\n<li>params : Matches for the individual wildcard segments.</li>\n</ul>\n<h1>Navigation</h1>\n<p>React Router Navigation</p>\n<ul>\n<li>Link, NavLink, Redirect, history props of React Router are used to help your user navigate routes. Adding links for navigation</li>\n<li>Issues on-click navigation event to a route defined in app.</li>\n<li>Usage renders an anchor tag with a correctly set href attribute.</li>\n</ul>\n<!---->\n<ul>\n<li>Link takes two properties: to and onClick.</li>\n<li>to : route location that points to an absolute path.</li>\n<li>onClick : clickHandler.</li>\n<li>NavLink works just like Link but has a bit of extra functionality.</li>\n<li>Adds extra styling, when the path it links to matches the current path.</li>\n<li>As it’s name suggests, it is used to Nav Bars.</li>\n<li>Takes three props:</li>\n<li>activeClassName : allows you to set a CSS class name for styling. (default set to 'active')</li>\n<li>activeStyle : style object that is applied inline when it's to prop. matches the current URL.</li>\n<li>exact prop is a boolean that defaults to false; you can set it to true to apply requirement of an exact URL match.</li>\n<li>exact can also be used as a flag instead of a reg. property value.</li>\n<li>benefit of adding this is so that you don’t trigger other matches. Switching between routes</li>\n<li>&#x3C;Switch> : Component allows you to only render one route even if several match the current URL.</li>\n<li>You may nest as many routes as you wish but only the first match of the current URL will be rendered.</li>\n<li>Very useful if we want a default component to render if none of our routes match.</li>\n</ul>\n<!---->\n<ul>\n<li>DefaultComponent will only render if none of the other URLs match up.</li>\n<li>&#x3C;Redirect> : Helps redirect users.</li>\n<li>Only takes a single prop: to.</li>\n</ul>\n<p>History</p>\n<ul>\n<li>History allows you to update the URL programmatically.</li>\n<li>Contains two useful methods:</li>\n<li>push : Adds a new URL to the end of the history stack.</li>\n<li>replace : Replaces the current URL on the history stack, so the back button won't take you to it.</li>\n</ul>\n<h1>Nested Routes</h1>\n<p>Why nested routes?</p>\n<ul>\n<li>Create routes that tunnel into main components vs getting rendered on the main page as it’s own thing. What are nested routes?</li>\n</ul>\n<p>Alt. version using props.match</p>\n<ul>\n<li>As you can see above, our end URL isn’t even defined until we apply those flexible values in.</li>\n</ul>\n<h1>React Builds</h1>\n<ul>\n<li>Build : Process of converting code into something that can actually execute or run on the target platform.</li>\n<li>In regards to React, the minimum a build should do is convert JSX to something that browsers can understand. Reviewing common terminology</li>\n<li>Linting : Process of using a tool to analyze your code to catch common errors, bugs, inconsistencies etc...</li>\n<li>Transpilation : Process of converting source code, like JS, from one version to another.</li>\n<li>Minification : Process of removing all unnecessary characters in your code.</li>\n<li>Bundling : Process of combining multiple code files into a single file.</li>\n<li>Tree Shaking : Process of removing unused or dead code from your application before it's bundled. Configuration or code?</li>\n<li>Configuration allows developers to create build tasks by declaring either JSON, XML, or YAML without explicitly writing every step in the process.</li>\n<li>Coding or Scripting simply requires code. Babel and webpack (yes, that's intentionally a lowercase 'w')</li>\n<li>Babel : Code Transpiler that allows you to use all of the latest features and syntax wihtout worrying about what browsers support what.</li>\n<li>webpack : Allows developers to use JS modules w/o requiring users to use a browser that natively supports ES modules.</li>\n<li>Create React App uses webpack and Babel under the hood to build applications. The Create React App build process</li>\n<li>What happens when you run npm start:</li>\n<li>.env variables are loaded.</li>\n<li>list of browsers to support are checked.</li>\n<li>config’d HTTP port checked for availability.</li>\n<li>application compiler is configured and created.</li>\n<li>webpack-dev-starter is started</li>\n<li>webpack-dev-starter compiles app.</li>\n<li>index.html is loaded into browser</li>\n<li>file watcher is started to watch for changes. Ejecting</li>\n<li>There is a script in Create React App called eject that allows you to 'eject' your application and expose all the hidden stuff. Preparing to deploy a React application for production</li>\n<li>Defining Env Variables</li>\n</ul>\n<p>Configuring the supported browsers</p>\n<ul>\n<li>If you specify older browsers it will affect how your code get’s transpiled. Creating a production build</li>\n<li>Run npm run build to create a production build.</li>\n<li>Bundles React in production mode and optimizes the build for the best performance.</li>\n</ul>\n<h1>Notes</h1>\n<h1>Introduction to React</h1>\n<ul>\n<li>Simply a nice library that turns data into DOM.</li>\n<li>Tree Diffing : Fast comparison and patching of data by comparing the current virtual DOM and new virtual DOM - updating only the pieces that change.</li>\n<li>It's just a tree with some fancy diffing</li>\n</ul>\n<h1>Create Element</h1>\n<p>From JavaScript To DOM</p>\n<ul>\n<li>The React.createElement function has the following form:</li>\n</ul>\n<!---->\n<ul>\n<li>Type : Type of element to create, i.e. a string for an HTML element or a reference to a function or class that is a React component.</li>\n<li>Props : Object that contains data to render the element.</li>\n<li>Children : Children of the elemet, as many as you want. Creating elements</li>\n<li>Our rendering goal:</li>\n</ul>\n<!---->\n<ul>\n<li>There are five tags to create:</li>\n<li>One ul</li>\n<li>Two li</li>\n<li>Two a</li>\n<li>There are certain attributes we want to appear in the DOM for these tags as well:</li>\n<li>Each li has a class (or className in React)</li>\n<li>Both a ele's have href attributes</li>\n<li>Also keep in mind the parent child relationships happening between the tags.</li>\n<li>ul is the parent of both li</li>\n<li>Each li has an a element as a child</li>\n<li>Each a has a text content child</li>\n</ul>\n<p>Converting to virtual DOM</p>\n<ul>\n<li>After you set up your React.createElement, you use React.render to take the value returned from cE and a DOM node to insert into the conversion of the real DOM.</li>\n</ul>\n<!---->\n<ul>\n<li>JS Code => Virtual DOM => Real Dom Updates</li>\n<li>If you call React.render a second or multiple times it just checks the existing Virtual DOM and it knows which smaller areas to change. Thinking in Components</li>\n<li>Components are pieces of reusable front-end pieces.</li>\n<li>Components should be Single Responsibility Principle compliant.</li>\n</ul>\n<h1>Create Element</h1>\n<p>React.createElement Demo</p>\n<ul>\n<li>Can import non-local dependencies with import 'package-link'</li>\n</ul>\n<!---->\n<ul>\n<li>Remember when importing modules from other files you have to denote the file type in the import statement. HTML Original</li>\n</ul>\n<p>React Version</p>\n<ul>\n<li>Because class is a reserved keyword in JS, in React we can use className to assign a class to an element.</li>\n<li>Remember the data that goes into createElement: element type, data to pass into the element, and then children.</li>\n<li>props : Properties;</li>\n<li>To handle certain values that are initially undefined, we can use defaultProps.</li>\n</ul>\n<!---->\n<ul>\n<li>You can change in the devTools Network tab the internet speed to check for values that may be undefined to hangle with defaultProps.</li>\n<li>If we fetch multiple pieces of data, we can render many things by using map.</li>\n<li>You need to assign a unique key to each of the clues.</li>\n<li>We need to keep track of them individually so that React can easily refer to a specific one if there is an issue. clue => { key:clue.id, ...clue }</li>\n</ul>\n<!---->\n<ul>\n<li>Note: JSX is preferred over React.createElement;</li>\n</ul>\n<h1>Notes from Hello Programmer Exercise</h1>\n<ul>\n<li>When you import modules from websites they must have CORs activated.</li>\n<li>These import statements, import global variables.</li>\n<li>When we want to move our code into production we need to change the imports into the production minified versions.</li>\n</ul>\n<!---->\n<ul>\n<li>While we will never actually be creating full apps with just React.createElement => it is the enginer that is running under the hood!</li>\n</ul>\n<h1>Introduction to JSX<img src=\"https://miro.medium.com/max/60/0*NNxuFMF-sOL8Wvdl?q=20\"><img src=\"https://miro.medium.com/max/630/0*NNxuFMF-sOL8Wvdl\">\n\n</h1>\n<ul>\n<li>JSX : Javascript Extension, a new language created by React developers to have an easier way of interacting with the React API. How to use JSX</li>\n<li>We will use babel to convert version of modern JS into an older version of JS. React Create Element</li>\n</ul>\n<p>JSX Version</p>\n<ul>\n<li>Keep in mind that self closing tags in React must have a forward slash to close it.</li>\n</ul>\n<!---->\n<ul>\n<li>Properties and Data</li>\n</ul>\n<!---->\n<ul>\n<li>Comments in JSX have the following syntax:</li>\n</ul>\n<!---->\n<ul>\n<li>Property Names:</li>\n<li>checked : Attribute of input components such as checkbox or radio, use it to set whether the component is checked or not.</li>\n<li>className : Used to specify a CSS class.</li>\n<li>dangerouslySetInnerHTML : React's equivalent of innerHTML because it is risky to cross-site scripting attacks.</li>\n<li>htmlFor : Because for is protected keyword, React elements use this instead.</li>\n<li>onChange : Event fired whenever a form field is changed.</li>\n<li>style : Accepts a JS object with camelCase properties rather than a CSS string.</li>\n<li>value : Supported by Input, Select, and TextArea components; use it to set the value of the component.</li>\n<li>Note: React uses camel-case!!! The JSX semicolon gotcha</li>\n</ul>\n<p>create Element equivalent</p>\n<ul>\n<li>We wrap what want to return in parenthesis so JS doesn’t auto add semi-colons after every line and run the code incorrectly.</li>\n<li>Just remember if you decided to use the return keyword in a function to ‘return some JSX’, then make sure you wrap the JSX in parenthesis.</li>\n</ul>\n<p>npx create-react-app my-app</p>\n<ul>\n<li>Single line used to initiate a React application.</li>\n<li>React has a great toolchain where you can see changes live as you’re editing your application.</li>\n<li>React errors will be rendered directly onto the browser window.</li>\n<li>A downside is that it installs a lot of bloat files.</li>\n<li>Examples of React create Element and JSX equivalent</li>\n</ul>\n<p>More Complex JSX Example</p>\n<h1>Notes</h1>\n<h1>Using Custom CRA Templates</h1>\n<p>Using a Custom Template npx create-react-app my-app --template @appacademy/simple</p>\n<ul>\n<li>Keep in mind that using create-react-app automatically initializes a git repository for you!</li>\n<li>App Academy custom template for creating a react app.</li>\n<li>If using the default react create project you can delete the following files:</li>\n<li>favicon.ico</li>\n<li>robots.txt</li>\n<li>logo192.png</li>\n<li>logo512.png</li>\n<li>manifest.json</li>\n<li>You can also simplify the html file into:</li>\n</ul>\n<p>Simplifying the src folder</p>\n<ul>\n<li>Remove: App.css App.test.js logo.svg serviceWorker.js setupTests.js</li>\n<li>Update the Following Files:</li>\n</ul>\n<h1>React Class Components</h1>\n<p>Class Components</p>\n<ul>\n<li>You can write React components using ES2015 Classes: Function Component</li>\n</ul>\n<p>ES2015 Version</p>\n<ul>\n<li>We can access props within a class component by using this.props</li>\n<li>Keep in mind Class Components are used just like function components.</li>\n</ul>\n<p>Setting and accessing props</p>\n<ul>\n<li>If we define a constructor method in our Class Component, we have to define the super method with props passed through it.</li>\n<li>Side Note: Before React used ES2015 Classes, it used React.createclass function, if you ever need to use this antiquated method make sure you install a module called create-react-class Stateful components</li>\n<li>One of the major reasons why you would choose to use a Class Component over a Function Component is to add and manage local or internal state to your component.</li>\n<li>Second of the major reasons is to be able to use a Class Component’s lifecycle methods. What is state?</li>\n<li>Props are data that are provided by the consumer or caller of the component.</li>\n<li>Not meant to be changed by a component.</li>\n<li>State is data that is internal to the component.</li>\n<li>Intended to be updated or mutated. When to use state</li>\n<li><em>Only Use State when it is absolutely necessary</em></li>\n<li>If the data never changes, or if it’s needed through an entire application use props instead.</li>\n<li>State is more often used when creating components that retrieve data from APIs or render forms.</li>\n<li>The general rule of thumb: If a component doesn’t need to use state or lifecyle methods, it should be prioritized as a function component.</li>\n<li>Functional:Stateless || Class:Stateful Initializing state</li>\n<li>Use a class constructor method to initialize this.state object. // Application Entry Point</li>\n</ul>\n<p>// Class Component: RandomQuote</p>\n<p>Updating State</p>\n<ul>\n<li>Let’s say we want to update our state with a new quote.</li>\n<li>We can set up event listeners in React similarly to how we did them before.</li>\n<li>&#x3C;button type=”button” onClick={this.changeQuote}> Change Quote &#x3C;/button></li>\n<li>onClick is the event listener.</li>\n<li>{this.changeQuote} is the event handler method.</li>\n<li>Our Class Component File should now look like this with the new additions:</li>\n</ul>\n<p>Don’t modify state directly</p>\n<ul>\n<li>It is important to never modify your state directly!</li>\n<li>ALWAYS use this.setState method to update state.</li>\n<li>This is because when you only use this.state to re-assign, no re-rendering will occur => leaving our component out of sync. Properly updating state from the previous state</li>\n<li>In our current example, the way we have changeQuote set up leaves us with occasionally producing the same index twice in a row.</li>\n<li>One solution is to design a loop but keep in mind that state updates are handled asynchronously in React (your current value is not guaranteed to be the latest)</li>\n<li>A safe method is to pass an anonymous method to this.setState (instead of an object literal) Previous</li>\n</ul>\n<p>Passing w/ Anon Method</p>\n<p>Providing default values for props</p>\n<ul>\n<li>In our current example, we pass in a static array of predefined quotes in our constructor.</li>\n<li>The way it is set up right now leaves our list of quotes unchanged after initialization.</li>\n<li>We can make quotes more dynamic by replacing our static array with a props argument passed into super.</li>\n<li>constructor(props) { super(props); }</li>\n<li>We can now move our quotes array to our application entry point and pass it in as a prop. // Application Entry Point</li>\n</ul>\n<!---->\n<ul>\n<li>One thing to note about this workaround is that the caller of the component <em>must</em> set the quotes prop or the component will throw an error => so use defaultProps!</li>\n</ul>\n<!---->\n<ul>\n<li>A good safety net in case the consumer/caller doesn’t provide a value for the quotes array.</li>\n<li>We can even remove it from our index.js now and an error will not be thrown.</li>\n</ul>\n<h1>Handling Events<img src=\"https://miro.medium.com/max/1400/0*c24XQBvqBBg0Eztz\"><img src=\"https://miro.medium.com/max/1400/0*N7KFfhOZZ7UrY8s4\"><img src=\"https://miro.medium.com/max/60/0*ywV6dO4a4QcGJxK5?q=20\"><img src=\"https://miro.medium.com/max/630/0*ywV6dO4a4QcGJxK5\"><img src=\"https://miro.medium.com/max/60/0*Nd73GjTY1PVQtjtQ?q=20\"><img src=\"https://miro.medium.com/max/630/0*Nd73GjTY1PVQtjtQ\">\n\n</h1>\n<ul>\n<li>To add an event listener to an element, just define a method to handle the event and associate that method with the element event you are listening for. Example</li>\n</ul>\n<!---->\n<ul>\n<li>Note that when refering the handler method in onClick we’re not invoking showAlert simply just passing a reference. Preventing default behavior</li>\n<li>HTML Elements in the browser often have a lot of default behavior.</li>\n<li>I.E. Clicking on an &#x3C;a> element navigates so a resource denoted by &#x3C;href> property.</li>\n<li>Here is an example of where using e.preventDefault() could come in handy.</li>\n</ul>\n<!---->\n<ul>\n<li>The button contained within the form will end up refreshing the page before this.submitForm method can be completed.</li>\n<li>We can stick an e.preventDefault() into the actual method to get around this problem.</li>\n<li>e : Parameter that references a Synthetic Event object type. Using this in event handlers</li>\n</ul>\n<!---->\n<ul>\n<li>When we console log this we see the AlertButton object.</li>\n<li>If we were to write the showAlert method with a regular class method like:</li>\n</ul>\n<!---->\n<ul>\n<li>We would get undefined => remember that fat arrow binds to the current context! Reviewing class methods and the this keyword</li>\n<li>Let’s refresh on binding.</li>\n</ul>\n<!---->\n<ul>\n<li>The first time we use our displayMethod call, it is called directly on the instance of the boyfriend class, which is why Momato Riruru was printed out.</li>\n<li>The second time it was called, the ref of the method is stored as a variable and method is called on that variable instead of the instance; resulting in a type error (it has lost it’s context)</li>\n<li>Remember we can use the bind method to rebind context!</li>\n<li>We can refactor to get the second call working like this:</li>\n<li>const displayAgain = Ming.displayName.bind(Ming); displayAgain(); // => Now Momato Riruru will be printed out.</li>\n<li>To continue using function declarations vs fat arrow we can assign context in a constructor within a class component.</li>\n</ul>\n<!---->\n<ul>\n<li>Experimental Syntax : Syntax that has been proposed to add to ECMAScript but hasn't officially been added to the language specification yet.</li>\n<li>It’s good to pick one approach and use it consistently, either:</li>\n<li>Class Properties &#x26; Arrow Functions</li>\n<li>Bind Method &#x26; This Keyword The SyntheticEvent object</li>\n<li>Synthetic Event Objects: Cross Browser wrappeds around the browser’s native event.</li>\n<li>Includes the use of stopPropagation() and preventDefault();</li>\n<li>Attributes of the Synthetic Event Object:Attributesboolean bubblesboolean cancelableDOMEventTarget currentTargetboolean defaultPreventednumber eventPhaseboolean isTrustedDOMEvent nativeEventvoid preventDefault()boolean isDefaultPrevented()void stopPropagation()boolean isPropagationStopped()void persist()DOMEventTarget targetnumber timeStampstring type</li>\n<li>nativeEvent : property defined in a synthetic event object that gives you access to the underlying native browser event (rarely used!)</li>\n</ul>\n<h1>Forms in React</h1>\n<p><em>Exercise being done in a separate file</em> Random Notes</p>\n<ul>\n<li>onChange : detects when a value of an input element changes.</li>\n<li>Assigning onChange to our input fields makes our component's state update in real time during user input.</li>\n<li>Dont forget to add preventDefault onto form submissions to deal with the default behavior of the browser refreshing the page!</li>\n<li>submittedOn: new Date(), Can be added to a form, most likely will persist into a DB.</li>\n<li>Controlled Components</li>\n<li>We use the onChange event handlers on form fields to keep our component's state as the \"one source of truth\"</li>\n<li>Adding an onChange event handler to every single input can massively bloat your code.</li>\n<li>Try assiging it to it’s own method to apply everywhere.</li>\n<li>textarea is handled differently in react: it takes in a value property to handle what the inner text will be.</li>\n</ul>\n<!---->\n<ul>\n<li>We can use validation libraries like validate to make our validation functions more complex.</li>\n</ul>\n<p>Note About Client-side vs server-side validation</p>\n<ul>\n<li>Server-side validation is not optional.</li>\n<li>Tech-savvy users can manipulate client-side validations.</li>\n<li>Sometimes the ‘best approach’ is to skip implementing validations on the client-side and rely completely on the server-side validation.</li>\n</ul>\n<h1>Component Lifecycle</h1>\n<ul>\n<li>Component Lifecycle is simply a way of describing the key moments in the lifetime of a component.</li>\n<li>Loading (Mounting)</li>\n<li>Updating</li>\n<li>Unloading (Unmounting) The lifecycle of a React component</li>\n<li>Each Class Component has several lifecycle methods that you can add to run code at specific times.</li>\n<li>componentDidMount : Method called after your component has been added to the component tree.</li>\n<li>componentDidUpdate : Method called after your component has been updated.</li>\n<li>componentWillUnmount : Method called just before your component is removed from the component tree.</li>\n<li>Mounting</li>\n<li>constructor method is called</li>\n<li>render method is called</li>\n<li>React updates the DOM</li>\n<li>componentDidMount is called</li>\n<li>Updating</li>\n<li>When component receives new props</li>\n<li>render method is called</li>\n<li>React updates the DOM</li>\n<li>componentDidUpdate is called</li>\n<li>When setState is called</li>\n<li>render method is called</li>\n<li>React updates the DOM</li>\n<li>componentDidUpdate is called</li>\n<li>Unmounting</li>\n<li>The moment before a class component is removed from the component tree:</li>\n<li>componentDidMount will be called. Avoiding the legacy lifecycle methods</li>\n<li>Occasionally you will encounter some deprecated lifecycle methods:</li>\n<li>UNSAFE_componentWillMount</li>\n<li>UNSAFE_componentWillReceiveProps</li>\n<li>UNSAFE_componentWillUpdate</li>\n<li>Just know they will be removed soon from React’s API, peace. Using the class component lifecycle methods <em>Exercise done in sep. directory</em></li>\n<li>Assorted Notes:</li>\n<li>Common Use for componentDidMount lifecycle method is for fetching data from an API.</li>\n</ul>\n<p>—</p>\n<h1>Notes</h1>\n<h1>React Context</h1>\n<ul>\n<li>You can use React Context to pass data through a component tree without having to manually thread props.</li>\n<li>Convenient way to share &#x26; update global data. Creating a Context</li>\n</ul>\n<!---->\n<ul>\n<li>We use React.createContext to create context.</li>\n<li>Keep in mind if you invoke this method with aruguments, those arguments will be set as default context. Adding a Provider to the App component</li>\n<li>In order to pass context over to child components we need to wrap them in a provider component.</li>\n<li>The provider component takes in a value property that points to the information that needs to be passed to the children.</li>\n</ul>\n<p>Setting up a Consumer</p>\n<ul>\n<li>Keep in mind that Context.Consumer expects a function as a child.</li>\n<li>The function has a value prop passed in from Context.Provider</li>\n</ul>\n<h1>Notes</h1>\n<h1>Redux Explained</h1>\n<ul>\n<li>JS Framework for managing the frontend state of a web application.</li>\n<li>Gives us ability to store information in an organized manner in a web app and quickly retrieve that information from anywhere in the app.</li>\n<li>Redux</li>\n<li>Client Side Data Management</li>\n<li>Controls “Frontend State”</li>\n<li>NOT Your Database</li>\n<li>NOT Component State</li>\n<li>Just used for managing Data</li>\n</ul>\n<!---->\n<ul>\n<li>Visual of how an app without React manages it’s data.</li>\n<li>A lot of prop threading happening.</li>\n<li>Data stored in a sep. location — global data. The Anatomy of Redux</li>\n<li>Store</li>\n<li>Holds the Frontend State</li>\n<li>Provides an API for the Frontend State</li>\n<li>Action</li>\n<li>POJOs</li>\n<li>Outline Changes to Frontend State</li>\n<li>Reducers</li>\n<li>Functions</li>\n<li>Make Changes to Frontend State Where did Redux come from?</li>\n<li>There are three central philosophies of Redux:</li>\n<li>A Single Source of Truth : state is stored in a POJO</li>\n<li>State is Read Only : State is immutable, modified by dispatching actions.</li>\n<li>Changes are Made with Pure Functions : Reducers that receive the actions and return updated state are pure functions of the old state and action. When is it appropriate to use Redux?</li>\n<li>When doing a project with simpler global state requirements, it may be better to choose React’s Context API over Redux.</li>\n<li>Redux offers more flexibility and support for middleware along with richer developer tools. Vocabulary</li>\n<li>State</li>\n<li><em>Redux is a State Manager</em></li>\n<li>State is all the information stored by that program at a particular point in time.</li>\n<li>Redux’s main job is to store the state and make it directly available to your entire app.</li>\n<li>Store</li>\n<li><em>Redux stores state in a single store</em>.</li>\n<li>Redux store is a single JS object with a couple of methods (not a class!)</li>\n<li>Methods include: getState, dispatch(action), and subscribe(listener)</li>\n<li>Actions</li>\n<li><em>Redux store is updated by dispatching actions</em></li>\n<li>Action is just a POJO that includes a mandatory type property.</li>\n<li>Contain info to update the store.</li>\n<li>We dispatch actions in response to User actions or AJAX requests.</li>\n<li>Pure Functions</li>\n<li><em>Redux Reducers are Pure Functions</em></li>\n<li>Functions are pure when their behavior depends only on it’s arguments as has no side effects.</li>\n<li>Simply takes in an argument and outputs a value.</li>\n<li>Reducer</li>\n<li><em>Redux handles actions using reducers</em></li>\n<li>A function that is called each time an action is dispatched.</li>\n<li>Takes in an action and current state</li>\n<li>Required to be pure functions so their behavior is predictable.</li>\n<li>Middleware</li>\n<li><em>Customize response to dispatch actions by using Middleware</em></li>\n<li>Middleware is an optional component of Redus that allows custom responses to dispatched actions.</li>\n<li>Most common use is to dispatch async requests to a server.</li>\n<li>Time Traveling Dev Tools</li>\n<li><em>Redux can time travel wow</em></li>\n<li>Time travel refers to Redux’s ability to revert to a previous state because reducers are all pure functions.</li>\n<li>Thunks</li>\n<li><em>Convenient format for taking async actions in Redux</em></li>\n<li>General concept in CS referring to a function who’s primary purpose is to call another function.</li>\n<li>Most commonly used to make async API requests.</li>\n</ul>\n<h1>Flux and Redux</h1>\n<p>What is Flux?</p>\n<ul>\n<li>Front-end application architecutre.</li>\n<li>A pattern in which to structure an application.</li>\n<li>Unidirectional Data Flow — offers more predictability.</li>\n<li>Actions : Begins the data flow of data, simple object that contains a type; type indicates the type of change to be performed.</li>\n<li>Dispatcher : Mechanism for distributing actions to the store.</li>\n<li>Store : The entire state of the application, responsible for updating the state of your app.</li>\n<li>View : Unit of code that's responsible for rendering the user interface. Used to re-render the application when actions and changes occur.</li>\n</ul>\n<!---->\n<ul>\n<li>Redux</li>\n</ul>\n<!---->\n<ul>\n<li>Library that facilitates the implementation of Flux.</li>\n<li>Redux Three Principles</li>\n<li>Single Source of Truth</li>\n<li>State is Read-Only</li>\n<li>Only Pure Functions Change State</li>\n</ul>\n<h1>Store</h1>\n<ul>\n<li>Simply an object that holds the application state wrapped in an API.</li>\n<li>Three methods:</li>\n<li>getState() : Returns the store's current state.</li>\n<li>dispatch(action) : Passes an action into the store's reducer to tell it what info to update.</li>\n<li>subscribe(callback) : Registers a callback to be triggered whenever the store updates. Updating the Store</li>\n</ul>\n<p>Subscribing to the store</p>\n<ul>\n<li>Whenever a store process a dispatch(), it triggers all its subscribers.</li>\n<li>Subscribers : callbacks that can be added to the store via subscribe().</li>\n</ul>\n<p>Reviewing a simple example</p>\n<h1>Reducers\n\n\n</h1>\n<ul>\n<li>Reducer function receives the current state and action, updates the state appropriately based on the action.type and returns the following state.</li>\n<li>You can bundles different action types and ensuing logic by using a switch/case statement.</li>\n</ul>\n<p>Reviewing how Array#slice works</p>\n<ul>\n<li>Approach that can be used to remove an element without mutating the original array. Avoiding state mutations</li>\n<li>Your reducer must always return a new object if the state changes. GOOD</li>\n</ul>\n<p>BAD</p>\n<h1>Actions</h1>\n<ul>\n<li>Actions are the only way to trigger changes to the store’s state. Using action creators</li>\n</ul>\n<!---->\n<ul>\n<li>fruit is the payload key and orange is the state data</li>\n<li>Action Creators : Functions created from extrapolating the creation of an action object.</li>\n</ul>\n<!---->\n<ul>\n<li>Use parenthesis for implicit return value.</li>\n<li>We can now add whatever fruit we’d like.</li>\n</ul>\n<p>Preventing typos in action type string literals</p>\n<ul>\n<li>Using constant variables helps reduce simple typos in a reducer’s case clauses.</li>\n</ul>\n<h1>Debugging Arrow Functions</h1>\n<ul>\n<li>It is important to learn how to use debugger statements with arrow functions to effectively debug Redux cycle. Understanding the limitations of implicit return values</li>\n</ul>\n<!---->\n<ul>\n<li>You must use explicit return statement arrow function to use a debugger.</li>\n</ul>\n<h1>React Router Introduction</h1>\n<p>Now that you know how to render components in a React app, how do you handle rendering different components for different website pages? React Router is the answer!</p>\n<p>Think of how you have created server-side routes in Express. Take the following URL and server-side route. Notice how the /users/:userId path corresponds with the <a href=\"http://localhost:3000/users/2\">http://localhost:3000/users/2</a> URL to render a specific HTML page.</p>\n<p>In the default React setup, you lose the ability to create routes in the same manner as in Express. This is what React Router aims to solve!</p>\n<p><a href=\"https://github.com/ReactTraining/react-router\">React Router</a> is a frontend routing library that allows you to control which components to display using the browser location. A user can also copy and paste a URL and email it to a friend or link to it from their own website.</p>\n<p>When you finish this article, you should be able to use the following from the react-router-dom library:</p>\n<ul>\n<li>&#x3C;BrowserRouter> to provide your application access to the react-router-dom library; and</li>\n<li>&#x3C;Route> to connect specific URL paths to specific components you want rendered; and</li>\n<li>&#x3C;Switch> to wrap several Route elements, rendering only one even if several match the current URL; and</li>\n<li>React Router’s match prop to access route path parameters.</li>\n</ul>\n<h1>Getting started with routing</h1>\n<p>Since you are writing single page apps, you don’t want to refresh the page each time you change the browser location. Instead, you want to update the browser location and your app’s response using JavaScript. This is known as client-side routing. You are using React, so you will use React Router to do this.</p>\n<p>Create a simple react project template:</p>\n<p>Then install React Router:</p>\n<p>Now import BrowserRouter from react-router-dom in your entry file:</p>\n<h1>BrowserRouter</h1>\n<p>BrowserRouter is the primary component of the router that wraps your route hierarchy. It creates a React context that passes routing information down to all its descendent components. For example, if you want to give &#x3C;App> and all its children components access to React Router, you would wrap &#x3C;App> like so:</p>\n<p>Now you can route the rendering of certain components to certain URLs (i.e <a href=\"https://www.website.com/profile).\">https://www.website.com/profile</a><a href=\"https://www.website.com/profile).\">).</a></p>\n<h1>HashRouter</h1>\n<p>Alternatively, you could import and use HashRouter from react-router-dom. Links for applications that use &#x3C;HashRouter> would look like <a href=\"https://www.website.com/#/profile\">https://www.website.com/#/profile</a> (with an # between the domain and path).</p>\n<p>You’ll focus on using the &#x3C;BrowserRouter>.</p>\n<h1>Creating frontend routes</h1>\n<p>React Router helps your React application render specific components based on the URL. The React Router component you’ll use most often is &#x3C;Route>.</p>\n<p>The &#x3C;Route> component is used to wrap another component, causing that component to only be rendered if a certain URL is matched. The behavior of the &#x3C;Route> component is controlled by the following props: path, component, exact, and render (optional).</p>\n<p>Create a simple Users component that returns &#x3C;h1>This is the users index!&#x3C;/h1>. Now let's refactor your index.js file so that you can create your routes within the component:</p>\n<p>Note that BrowserRouter can only have a single child component, so the snippet above wraps all routes within parent a &#x3C;div> element. Now let's create some routes!</p>\n<h1>component</h1>\n<p>Begin with the component prop. This prop takes a reference to the component to be rendered. Let's render your App component:</p>\n<p>Now you’ll need to connect a path to the component!</p>\n<h1>path</h1>\n<p>The wrapped component will only be rendered when the path is matched. The path matches the URL when it matches some initial portion of the URL. For example, a path of / would match both of the following URLs: / and /users. (Because /users begins with a / it matches the path /)</p>\n<p>Take a moment to navigate to <a href=\"http://localhost:3000/users\">http://localhost:3000/users</a> to see how both the App component and Users component are rendering.</p>\n<h1>exact</h1>\n<p>If this exact flag is set, the path will only match when it exactly matches the URL. Then browsing to the /users path would no longer match / and only the Users component will be rendered (instead of both the App component and Users component).</p>\n<h1>render</h1>\n<p>This is an optional prop that takes in a function to be called. The function will be called when the path matches. The function’s return value is rendered. You could also define a functional component inside the component prop, but this results in extra, unnecessary work for React. The render prop is preferred for inline rendering of simple functional components.</p>\n<p>The difference between using component and render is that component returns new JSX to be re-mounted every time the route renders, while render simply returns to JSX what will be mounted once and re-rendered. For any given route, you should only use either the component prop, or the render prop. If both are supplied, only the component prop will be used.</p>\n<p>It can be helpful to use render instead of component in your &#x3C;Route> when you need to pass props into the rendered component. For example, imagine that you needed to pass the users object as a prop to your Users component. Then you could pass in props from Root to Users by returning the Users component like so:</p>\n<p>As a reminder, BrowserRouter can only have a single child component. That's why you have wrapped all your routes within parent a &#x3C;div> element.</p>\n<p>With this Root component, you will always render the &#x3C;h1>Hi, I'm Root!&#x3C;/h1>, regardless of the path. Because of the first &#x3C;Route>, you will only re